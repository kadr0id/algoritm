/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package scripting.util;

import com.google.common.base.Joiner;
import com.google.common.base.Strings;
import com.google.common.collect.ImmutableMap;
import com.google.common.net.InetAddresses;
import com.google.common.net.InternetDomainName;
import org.apache.commons.io.IOUtils;
import org.apache.commons.lang3.StringUtils;
import org.joda.time.DateTime;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.TextNode;
import org.jsoup.select.Elements;
import scripting.util.http.NukeHttpClient;

import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import java.io.*;
import java.net.URI;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;
import java.util.*;
import java.util.concurrent.Executors;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import scripting.Resources;
import scripting.exception.SubmissionTimeoutException;
import scripting.exception.TaskStoppedException;
import scripting.util.concurrent.ManualResetEvent;

/**
 *
 * @author macbookpro
 */
public class TextUtility {

    public static String[] company = new String[]{"Wal-Mart Stores", "General Motors", "Ford Motor", "General Electric", "Citigroup", "Enron", "Intl. Business Machines", "AT&T", "Verizon Communications", "Philip Morris", "J.P. Morgan Chase", "Bank of America Corp.", "SBC Communications", "Boeing", "Texaco", "Duke Energy", "Kroger", "Hewlett-Packard", "Chevron", "BMW", "Sony", "Walt Disney", "Mercedes-Benz", "Apple"};
    public static String[] country = new String[]{"Afghanistan", "Albania", "Algeria", "Andorra", "Angola", "Antigua & Deps", "Argentina", "Armenia", "Australia", "Austria", "Azerbaijan", "Bahamas", "Bahrain", "Bangladesh", "Barbados", "Belarus", "Belgium", "Belize", "Benin", "Bhutan", "Bolivia", "Bosnia Herzegovina", "Botswana", "Brazil", "Brunei", "Bulgaria", "Burkina", "Burundi", "Cambodia", "Cameroon", "Canada", "Cape Verde", "Central African Rep", "Chad", "Chile", "China", "Colombia", "Comoros", "Congo", "Congo {Democratic Rep}", "Costa Rica", "Croatia", "Cuba", "Cyprus", "Czech Republic", "Denmark", "Djibouti", "Dominica", "Dominican Republic", "East Timor", "Ecuador", "Egypt", "El Salvador", "Equatorial Guinea", "Eritrea", "Estonia", "Ethiopia", "Fiji", "Finland", "France", "Gabon", "Gambia", "Georgia", "Germany", "Ghana", "Greece", "Grenada", "Guatemala", "Guinea", "Guinea-Bissau", "Guyana", "Haiti", "Honduras", "Hungary", "Iceland", "India", "Indonesia", "Iran", "Iraq", "Ireland {Republic}", "Israel", "Italy", "Ivory Coast", "Jamaica", "Japan", "Jordan", "Kazakhstan", "Kenya", "Kiribati", "Korea North", "Korea South", "Kosovo", "Kuwait", "Kyrgyzstan", "Laos", "Latvia", "Lebanon", "Lesotho", "Liberia", "Libya", "Liechtenstein", "Lithuania", "Luxembourg", "Macedonia", "Madagascar", "Malawi", "Malaysia", "Maldives", "Mali", "Malta", "Marshall Islands", "Mauritania", "Mauritius", "Mexico", "Micronesia", "Moldova", "Monaco", "Mongolia", "Montenegro", "Morocco", "Mozambique", "Myanmar, {Burma}", "Namibia", "Nauru", "Nepal", "Netherlands", "New Zealand", "Nicaragua", "Niger", "Nigeria", "Norway", "Oman", "Pakistan", "Palau", "Panama", "Papua New Guinea", "Paraguay", "Peru", "Philippines", "Poland", "Portugal", "Qatar", "Romania", "Russian Federation", "Rwanda", "St Kitts & Nevis", "St Lucia", "Saint Vincent & the Grenadines", "Samoa", "San Marino", "Sao Tome & Principe", "Saudi Arabia", "Senegal", "Serbia", "Seychelles", "Sierra Leone", "Singapore", "Slovakia", "Slovenia", "Solomon Islands", "Somalia", "South Africa", "South Sudan", "Spain", "Sri Lanka", "Sudan", "Suriname", "Swaziland", "Sweden", "Switzerland", "Syria", "Taiwan", "Tajikistan", "Tanzania", "Thailand", "Togo", "Tonga", "Trinidad & Tobago", "Tunisia", "Turkey", "Turkmenistan", "Tuvalu", "Uganda", "Ukraine", "United Arab Emirates", "United Kingdom", "United States", "Uruguay", "Uzbekistan", "Vanuatu", "Vatican City", "Venezuela", "Vietnam", "Yemen", "Zambia", "Zimbabwe"};
    public static String[] zipcode = new String[]{"02804", "02806", "02807", "02808", "02809", "02812", "02813", "02814", "02815", "02816", "02817", "02818", "02822", "02825", "02827", "02828", "02830", "02831", "02833", "02835", "02837", "02838", "02839", "02840", "02852", "02857", "02858", "02859", "02860", "02863", "02864", "02865", "02871", "02874", "02875", "02878", "02879", "02881", "02885", "02886", "02891", "02893", "02894", "02895", "02903", "02904", "02905", "02914", "02915", "02916", "02917", "29001", "29003", "29006", "29009", "29010", "29014", "29015", "29016", "29018", "29020", "29030", "29031", "29032", "29033", "29036", "29037", "29038", "29039", "29040", "29042", "29044", "29045", "29046", "29047", "29048", "29051", "29052", "29053", "29054", "29055", "29056", "29058", "29059", "29061", "29062", "29063", "29065", "29067", "29069", "29070", "29072", "29074", "29075", "29078", "29079", "29080", "29081", "29082", "29101", "29102", "29104", "29105", "29107", "29108", "29111", "29112", "29113", "29114", "29115", "29122", "29123", "29125", "29126", "29127", "29128", "29129", "29130", "29132", "29133", "29135", "29137", "29138", "29142", "29145", "29146", "29148", "29150", "29152", "29153", "29160", "29161", "29162", "29163", "29164", "29166", "29168", "29169", "29175", "29177", "29178", "29180", "29201", "29301", "29303", "29316", "29320", "29321", "29322", "29323", "29325", "79922", "87001", "87002", "87004", "87005", "87006", "87007", "87008", "87010", "87011", "87012", "87013", "87014", "87015", "87016", "87017", "87018", "87020", "87022", "87023", "87024", "87025", "87026", "87027", "87028", "87029", "87031", "87032", "87034", "87035", "87036", "87037", "87038", "87040", "87041", "87042", "87043", "87044", "87045", "87047", "87048", "87049", "87052", "87053", "87056", "87059", "87060", "87061", "87062", "87063", "87064", "87068", "87070", "87083", "87102", "87114", "87124", "87301", "87310", "87311", "87312", "87313", "87315", "87316", "87317", "87319", "87320", "87321", "87322", "87323", "87325", "87326", "87327", "87347", "87357", "87364", "87375", "87401", "87410", "87412", "87413", "87415", "87416", "87417", "87418", "87419", "87420", "87421", "87455", "87461", "87501", "87505", "87510", "87511", "87512", "87513", "87514", "87515", "87516", "87517", "35004", "35005", "35006", "35007", "35010", "35014", "35016", "35019", "35020", "35031", "35033", "35034", "35035", "35036", "35040", "35042", "35043", "35044", "35045", "35049", "35051", "35052", "35053", "35054", "35055", "35060", "35061", "35062", "35063", "35064", "35068", "35070", "35071", "35072", "35073", "35074", "35077", "35078", "35079", "35080", "35082", "35083", "35085", "35087", "35089", "35091", "35094", "35096", "35097", "35098", "35111", "35112", "35114", "35115", "35116", "35117", "35118", "35119", "35120", "35121", "35124", "35125", "35126", "35127", "35130", "35131", "35133", "35135", "35136", "35139", "35143", "35146", "35147", "35148", "35149", "35150", "35160", "35171", "35172", "35173", "35175", "35176", "35178", "35179", "35180", "35183", "35184", "35186", "35188", "35203", "35401", "35441", "35442", "35443", "35444", "35446", "35447", "35452", "35453", "35456", "32008", "32009", "32011", "32013", "32024", "32033", "32034", "32038", "32040", "32043", "32044", "32046", "32052", "32053", "32054", "32058", "32059", "32060", "32061", "32062", "32063", "32065", "32066", "32068", "32071", "32072", "32079", "32082", "32083", "32084", "32087", "32091", "32094", "32096", "32097", "32102", "32110", "32112", "32113", "32114", "32117", "32119", "32124", "32130", "32131", "32132", "32134", "32136", "32137", "32138", "32139", "32140", "32145", "32147", "32148", "32157", "32159", "32168", "32174", "32177", "32179", "32180", "32181", "32182", "32185", "32187", "32189", "32190", "32193", "32195", "32202", "32212", "32215", "32227", "32233", "32234", "32266", "32301", "32320", "32321", "32322", "32323", "32324", "32327", "32328", "32330", "32331", "32332", "32333", "32334", "32335", "32336", "32337", "32340", "32343", "32344", "32346", "32347", "32350", "32351", "89439", "90001", "90022", "90040", "90046", "90058", "90063", "90069", "90201", "90210", "90220", "90221", "90222", "90230", "90240", "90245", "90247", "90250", "90254", "90255", "90260", "90262", "90263", "90266", "90270", "90272", "90274", "90275", "90277", "90280", "90290", "90291", "90292", "90293", "90301", "90304", "90401", "90501", "90601", "90606", "90620", "90623", "90630", "90631", "90638", "90640", "90650", "90660", "90670", "90680", "90704", "90706", "90710", "90712", "90716", "90717", "90720", "90723", "90731", "90740", "90742", "90743", "90744", "90745", "90802", "90804", "91001", "91006", "91010", "91011", "91016", "91020", "91024", "91030", "91040", "91042", "91101", "91108", "91201", "91214", "91301", "91302", "91303", "91306", "91307", "91311", "91316", "91320", "91321", "91324", "91326", "91331", "91335", "91340", "91342", "91343", "91344", "91345", "91350", "91351", "03031", "03032", "03033", "03034", "03036", "03037", "03038", "03042", "03043", "03044", "03045", "03047", "03048", "03049", "03051", "03052", "03053", "03054", "03055", "03057", "03060", "03070", "03071", "03076", "03077", "03079", "03082", "03084", "03086", "03087", "03101", "03106", "03110", "03215", "03216", "03217", "03218", "03220", "03221", "03222", "03223", "03224", "03225", "03226", "03227", "03229", "03230", "03233", "03234", "03235", "03237", "03240", "03241", "03242", "03243", "03244", "03246", "03251", "03253", "03254", "03255", "03256", "03257", "03259", "03260", "03261", "03262", "03263", "03264", "03266", "03268", "03269", "03273", "03275", "03276", "03278", "03279", "03280", "03281", "03282", "03284", "03287", "03290", "03291", "03301", "03303", "03304", "03307", "03431", "03440", "03441", "03442", "03443", "03444", "03445", "03446", "03447", "03448", "03449", "03450", "00601", "00602", "00603", "00606", "00610", "00612", "00616", "00617", "00622", "00623", "00624", "00627", "00631", "00637", "00638", "00641", "00646", "00647", "00650", "00652", "00653", "00656", "00659", "00660", "00662", "00664", "00667", "00669", "00670", "00674", "00676", "00677", "00678", "00680", "00683", "00685", "00687", "00688", "00690", "00692", "00693", "00698", "00703", "00704", "00705", "00707", "00714", "00715", "00716", "00718", "00719", "00720", "00723", "00725", "00729", "00735", "00736", "00738", "00739", "00740", "00741", "00745", "00751", "00754", "00757", "00765", "00766", "00767", "00769", "00771", "00772", "00773", "00775", "00777", "00778", "00780", "00782", "00783", "00784", "00791", "00794", "00795", "00901", "00934", "00949", "00952", "00953", "00956", "00962", "00965", "00976", "00979", "01001", "01002", "01005", "01007", "01008", "01010", "01011", "01012", "01013", "01022", "01026", "01027", "01028", "01029", "01030", "01031", "01032", "01033", "01034", "01035", "01036", "01037", "01038", "01039", "01040", "01050", "01053", "01054", "01056", "01057", "01060", "01068", "01069", "01070", "01071", "01072", "01073", "01075", "01077", "01080", "01081", "01082", "01083", "01084", "01085", "01088", "01089", "01092", "01095", "01096", "01098", "01103", "01106", "01151", "01201", "01220", "01222", "01223", "01225", "01226", "01230", "01235", "01236", "01237", "01238", "01240", "01242", "01244", "01245", "01247", "01253", "01254", "01255", "01256", "01257", "01258", "01259", "01262", "01264", "01266", "01267", "01301", "01330", "01331", "01338", "01339", "01340", "01341", "01342", "01344", "01346", "01349", "01350", "01351", "01360", "01366", "01367", "01368", "01370", "01373", "37010", "37012", "37013", "37014", "37015", "37016", "37018", "37019", "37020", "37022", "37023", "37025", "37026", "37027", "37028", "37029", "37030", "37031", "37032", "37033", "37034", "37035", "37036", "37037", "37040", "37046", "37047", "37048", "37049", "37050", "37051", "37052", "37055", "37057", "37058", "37059", "37060", "37061", "37062", "37064", "37066", "37072", "37073", "37074", "37075", "37076", "37078", "37079", "37080", "37082", "37083", "37085", "37086", "37087", "37091", "37095", "37096", "37097", "37098", "37101", "37110", "37115", "37118", "37122", "37127", "37134", "37135", "37137", "37138", "37140", "37141", "37142", "37143", "37144", "37145", "37146", "37147", "37148", "37149", "37150", "37151", "37152", "37153", "37160", "37166", "37167", "37171", "37172", "37174", "37175", "37178", "37179", "37180", "37181", "37183", "37184", "37185", "37186", "37187", "37188", "20601", "20602", "20606", "20607", "20608", "20609", "20611", "20612", "20613", "20615", "20616", "20617", "20618", "20619", "20620", "20621", "20622", "20623", "20624", "20625", "20626", "20628", "20629", "20630", "20632", "20634", "20636", "20637", "20639", "20640", "20645", "20646", "20650", "20653", "20657", "20658", "20659", "20662", "20664", "20667", "20670", "20674", "20675", "20676", "20677", "20678", "20680", "20684", "20685", "20687", "20688", "20689", "20690", "20692", "20693", "20695", "20701", "20705", "20706", "20707", "20708", "20710", "20711", "20712", "20714", "20715", "20716", "20722", "20732", "20733", "20735", "20736", "20737", "20740", "20743", "20744", "20745", "20746", "20747", "20748", "20751", "20754", "20755", "20758", "20759", "20762", "20763", "20764", "20765", "20769", "20770", "20772", "20776", "20777", "20778", "20779", "20781", "20782", "20783", "20784", "70001", "70030", "70031", "70032", "70036", "70037", "70038", "70039", "70040", "70041", "70043", "70047", "70049", "70050", "70051", "70052", "70053", "70056", "70057", "70058", "70062", "70067", "70068", "70070", "70071", "70072", "70075", "70076", "70079", "70080", "70082", "70083", "70084", "70085", "70086", "70087", "70090", "70091", "70092", "70094", "70112", "70121", "70123", "70301", "70339", "70341", "70342", "70343", "70344", "70345", "70346", "70353", "70354", "70355", "70356", "70357", "70358", "70359", "70360", "70372", "70373", "70374", "70375", "70377", "70380", "70390", "70391", "70392", "70393", "70394", "70395", "70397", "70401", "70420", "70422", "70426", "70427", "70431", "70433", "70436", "70437", "70438", "70441", "70442", "70443", "70444", "70445", "70446", "70447", "70448", "70449", "70450", "70451", "70452", "70453", "70454", "70455", "70456", "70458", "70462", "43001", "43002", "43003", "43004", "43005", "43006", "43008", "43009", "43010", "43011", "43013", "43014", "43015", "43016", "43018", "43019", "43021", "43022", "43023", "43025", "43026", "43028", "43029", "43031", "43032", "43033", "43035", "43036", "43037", "43040", "43044", "43045", "43046", "43050", "43054", "43055", "43056", "43060", "43061", "43062", "43064", "43065", "43066", "43067", "43068", "43070", "43071", "43072", "43074", "43076", "43077", "43078", "43080", "43081", "43084", "43085", "43101", "43102", "43103", "43105", "43106", "43107", "43109", "43110", "43111", "43112", "43113", "43115", "43116", "43119", "43123", "43125", "43126", "43127", "43128", "43130", "43135", "43136", "43137", "43138", "43140", "43142", "43143", "43144", "43145", "43146", "43147", "43148", "43149", "43150", "43151", "43152", "43153", "43154", "43155", "43156", "43157", "43158", "43160", "43162", "24701", "24712", "24714", "24715", "24716", "24719", "24724", "24726", "24731", "24733", "24736", "24737", "24739", "24740", "24747", "24801", "24808", "24811", "24813", "24815", "24816", "24817", "24818", "24821", "24822", "24823", "24824", "24825", "24827", "24828", "24829", "24830", "24831", "24836", "24839", "24842", "24843", "24844", "24845", "24846", "24848", "24849", "24850", "24851", "24852", "24853", "24854", "24855", "24856", "24857", "24860", "24861", "24862", "24866", "24867", "24868", "24869", "24870", "24871", "24872", "24873", "24874", "24879", "24880", "24881", "24882", "24884", "24887", "24888", "24892", "24894", "24895", "24897", "24898", "24901", "24910", "24915", "24916", "24918", "24919", "24920", "24924", "24925", "24927", "24931", "24934", "24935", "24936", "24938", "24941", "24943", "24944", "24945", "24946", "24950", "24951", "24954", "24957", "24962", "24963", "83120", "83201", "83202", "83203", "83210", "83211", "83212", "83213", "83214", "83215", "83217", "83218", "83220", "83221", "83223", "83226", "83227", "83228", "83232", "83234", "83235", "83236", "83237", "83238", "83239", "83241", "83243", "83244", "83245", "83246", "83250", "83251", "83252", "83253", "83254", "83255", "83261", "83262", "83263", "83271", "83272", "83274", "83276", "83277", "83278", "83281", "83283", "83285", "83286", "83287", "83301", "83302", "83311", "83312", "83313", "83314", "83316", "83318", "83320", "83321", "83322", "83323", "83324", "83325", "83327", "83328", "83330", "83332", "83333", "83334", "83335", "83336", "83337", "83338", "83340", "83341", "83342", "83344", "83346", "83347", "83348", "83349", "83350", "83352", "83353", "83355", "83401", "83402", "83420", "83421", "83422", "83423", "83424", "83425", "83427", "83428", "83429", "83431", "83433", "83434", "20105", "20106", "20109", "20115", "20117", "20119", "20120", "20124", "20129", "20130", "20132", "20135", "20136", "20137", "20138", "20139", "20140", "20141", "20143", "20144", "20147", "20151", "20155", "20158", "20164", "20169", "20170", "20175", "20180", "20181", "20184", "20186", "20190", "20197", "20198", "22003", "22015", "22026", "22027", "22030", "22039", "22041", "22042", "22043", "22044", "22046", "22060", "22066", "22079", "22101", "22102", "22124", "22125", "22134", "22150", "22151", "22152", "22172", "22180", "22191", "22192", "22193", "22201", "22301", "22303", "22306", "22307", "22308", "22309", "22310", "22401", "22405", "22427", "22432", "22433", "22435", "22436", "22437", "22438", "22443", "22448", "22454", "22460", "22469", "22473", "22476", "22480", "22482", "22485", "22488", "22503", "22504", "22507", "22508", "22509", "22511", "22514", "22520", "22529", "22534", "38601", "38603", "38606", "38609", "38610", "38611", "38614", "38617", "38618", "38619", "38620", "38621", "38622", "38623", "38625", "38626", "38627", "38629", "38630", "38631", "38632", "38633", "38635", "38637", "38639", "38641", "38642", "38643", "38644", "38645", "38646", "38647", "38649", "38650", "38651", "38652", "38654", "38655", "38658", "38659", "38661", "38663", "38664", "38665", "38666", "38668", "38669", "38670", "38671", "38673", "38674", "38676", "38677", "38680", "38683", "38685", "38701", "38720", "38721", "38722", "38723", "38725", "38726", "38730", "38732", "38736", "38737", "38738", "38739", "38740", "38744", "38745", "38746", "38748", "38751", "38753", "38754", "38756", "38759", "38760", "38761", "38762", "38764", "38765", "38767", "38768", "38769", "38771", "38772", "38773", "38774", "38778", "38801", "38821", "38824", "38826", "38827", "38828", "38829", "38833", "75001", "75002", "75006", "75009", "75019", "75020", "75022", "75023", "75032", "75034", "75038", "75040", "75048", "75050", "75056", "75057", "75058", "75065", "75067", "75068", "75069", "75076", "75078", "75080", "75087", "75088", "75090", "75094", "75098", "75101", "75102", "75103", "75104", "75105", "75110", "75114", "75115", "75116", "75117", "75119", "75121", "75124", "75125", "75126", "75127", "75132", "75134", "75135", "75140", "75141", "75142", "75143", "75144", "75147", "75148", "75149", "75152", "75153", "75154", "75155", "75158", "75159", "75160", "75163", "75164", "75165", "75166", "75169", "75172", "75173", "75180", "75189", "75201", "75205", "75211", "75234", "75401", "75407", "75409", "75410", "75411", "75412", "75413", "75414", "75415", "75416", "75417", "75418", "75420", "75421", "75422", "75423", "75424", "75426", "75428", "75431", "75432", "75433", "75434", "75435", "05001", "05031", "05032", "05033", "05034", "05035", "05036", "05037", "05038", "05039", "05040", "05041", "05042", "05043", "05045", "05046", "05048", "05051", "05052", "05053", "05054", "05055", "05056", "05058", "05059", "05060", "05061", "05062", "05065", "05067", "05068", "05069", "05070", "05071", "05072", "05073", "05074", "05075", "05076", "05077", "05079", "05081", "05083", "05084", "05085", "05086", "05088", "05089", "05091", "05101", "05142", "05143", "05146", "05148", "05149", "05150", "05151", "05152", "05153", "05154", "05155", "05156", "05158", "05161", "05201", "05250", "05251", "05252", "05253", "05254", "05255", "05257", "05260", "05261", "05262", "05301", "05340", "05341", "05342", "05343", "05344", "05345", "05346", "05350", "05351", "05352", "05353", "05354", "05355", "05356", "05358", "05359", "05360", "05361", "05362", "05363", "05401", "05403", "05404", "05440", "82001", "82050", "82051", "82052", "82053", "82054", "82055", "82058", "82059", "82060", "82061", "82081", "82083", "82084", "82190", "82201", "82210", "82212", "82213", "82214", "82215", "82217", "82218", "82219", "82221", "82222", "82223", "82224", "82225", "82227", "82240", "82242", "82243", "82244", "82301", "82310", "82321", "82322", "82323", "82324", "82325", "82327", "82329", "82331", "82332", "82335", "82336", "82401", "82410", "82411", "82412", "82414", "82420", "82421", "82422", "82423", "82426", "82428", "82430", "82431", "82432", "82433", "82434", "82435", "82440", "82441", "82442", "82443", "82501", "82510", "82512", "82513", "82514", "82515", "82516", "82520", "82523", "82601", "82620", "82633", "82635", "82636", "82637", "82639", "82640", "82642", "82643", "82644", "82649", "82701", "82710", "82711", "82712", "82714", "82716", "82720", "82721", "82723", "82725", "82727", "06390", "10001", "10301", "10451", "10501", "10502", "10503", "10504", "10506", "10507", "10509", "10510", "10511", "10512", "10514", "10516", "10518", "10519", "10520", "10522", "10523", "10524", "10526", "10527", "10528", "10530", "10532", "10533", "10535", "10536", "10537", "10538", "10541", "10543", "10546", "10547", "10548", "10549", "10550", "10560", "10562", "10566", "10570", "10573", "10576", "10577", "10578", "10579", "10580", "10583", "10588", "10589", "10590", "10591", "10594", "10595", "10597", "10598", "10601", "10604", "10701", "10706", "10707", "10708", "10709", "10801", "10803", "10901", "10913", "10916", "10917", "10918", "10919", "10920", "10921", "10923", "10924", "10925", "10926", "10927", "10928", "10930", "10931", "10940", "10941", "10950", "10952", "10954", "10956", "10958", "10960", "10962", "10963", "10964", "10965", "10968", "10969", "10970", "10973", "10974", "66002", "66006", "66007", "66008", "66010", "66012", "66013", "66014", "66015", "66016", "66017", "66018", "66019", "66020", "66021", "66023", "66024", "66025", "66026", "66027", "66030", "66032", "66033", "66035", "66039", "66040", "66041", "66042", "66043", "66044", "66048", "66050", "66052", "66053", "66054", "66056", "66058", "66060", "66061", "66064", "66066", "66067", "66070", "66071", "66072", "66073", "66075", "66076", "66077", "66078", "66079", "66080", "66083", "66085", "66086", "66087", "66088", "66090", "66091", "66092", "66093", "66094", "66095", "66097", "66101", "66103", "66106", "66202", "66203", "66204", "66205", "66206", "66207", "66208", "66210", "66221", "66401", "66402", "66403", "66404", "66406", "66407", "66408", "66409", "66411", "66412", "66413", "66414", "66415", "66416", "66417", "66418", "66419", "66422", "66423", "66424", "66425", "66427", "66428", "66429", "48001", "48002", "48003", "48005", "48006", "48009", "48014", "48015", "48017", "48021", "48022", "48023", "48025", "48026", "48027", "48028", "48030", "48032", "48034", "48035", "48039", "48040", "48041", "48042", "48043", "48045", "48047", "48048", "48049", "48050", "48051", "48054", "48059", "48060", "48062", "48063", "48064", "48065", "48066", "48067", "48069", "48070", "48071", "48072", "48074", "48076", "48079", "48080", "48083", "48089", "48094", "48096", "48097", "48101", "48103", "48111", "48114", "48117", "48118", "48120", "48122", "48125", "48130", "48131", "48133", "48134", "48135", "48137", "48138", "48139", "48140", "48141", "48143", "48144", "48145", "48146", "48150", "48157", "48158", "48159", "48160", "48161", "48162", "48164", "48165", "48166", "48167", "48169", "48170", "48173", "48174", "48176", "48178", "48179", "48180", "48182", "48183", "48184", "48185", "48187", "07001", "07002", "07003", "07004", "07005", "07006", "07008", "07009", "07010", "07011", "07016", "07017", "07020", "07021", "07022", "07023", "07024", "07026", "07027", "07028", "07029", "07030", "07031", "07033", "07034", "07035", "07036", "07039", "07040", "07041", "07042", "07044", "07045", "07046", "07047", "07050", "07052", "07054", "07055", "07057", "07058", "07059", "07060", "07064", "07065", "07066", "07067", "07068", "07070", "07071", "07072", "07073", "07074", "07075", "07076", "07077", "07078", "07079", "07080", "07081", "07082", "07083", "07087", "07088", "07090", "07092", "07093", "07094", "07095", "07102", "07109", "07110", "07111", "07201", "07203", "07204", "07205", "07302", "07401", "07403", "07405", "07407", "07410", "07416", "07417", "07418", "07419", "07420", "07421", "07422", "07423", "07424", "07428", "07430", "07432", "07435", "07436", "07438", "07439", "07440", "03901", "03902", "03903", "03904", "03905", "03906", "03907", "03908", "03909", "04001", "04002", "04003", "04005", "04008", "04009", "04010", "04011", "04015", "04017", "04019", "04020", "04021", "04022", "04024", "04027", "04029", "04030", "04032", "04037", "04038", "04039", "04040", "04041", "04042", "04043", "04046", "04047", "04048", "04049", "04050", "04051", "04055", "04061", "04062", "04064", "04066", "04068", "04069", "04071", "04072", "04073", "04074", "04076", "04079", "04083", "04084", "04085", "04086", "04087", "04088", "04090", "04091", "04092", "04093", "04095", "04096", "04097", "04101", "04105", "04106", "04107", "04108", "04110", "04210", "04216", "04217", "04219", "04220", "04221", "04222", "04224", "04226", "04228", "04231", "04236", "04237", "04238", "04239", "04240", "04250", "04252", "04253", "04254", "04255", "04256", "04257", "04258", "04259", "04260", "04261", "80002", "80010", "80020", "80021", "80022", "80024", "80025", "80026", "80027", "80033", "80101", "80102", "80103", "80104", "80105", "80106", "80107", "80110", "80112", "80116", "80117", "80118", "80120", "80121", "80123", "80126", "80132", "80133", "80134", "80135", "80136", "80137", "80202", "80212", "80214", "80215", "80221", "80222", "80229", "80233", "80301", "80401", "80420", "80421", "80422", "80423", "80424", "80425", "80426", "80427", "80428", "80430", "80432", "80433", "80434", "80435", "80436", "80438", "80439", "80440", "80442", "80443", "80444", "80446", "80447", "80448", "80449", "80451", "80452", "80454", "80455", "80456", "80457", "80459", "80461", "80463", "80465", "80466", "80467", "80468", "80469", "80470", "80473", "80474", "80476", "80478", "80479", "80480", "80481", "80482", "80483", "80487", "80498", "80501", "80510", "80512", "80513", "80514", "80515", "80516", "15001", "15003", "15004", "15005", "15006", "15007", "15009", "15010", "15012", "15014", "15015", "15017", "15018", "15019", "15020", "15021", "15022", "15024", "15025", "15026", "15027", "15028", "15030", "15031", "15033", "15034", "15035", "15037", "15038", "15042", "15043", "15044", "15045", "15046", "15049", "15050", "15051", "15052", "15053", "15054", "15055", "15056", "15057", "15059", "15060", "15061", "15062", "15063", "15064", "15065", "15066", "15067", "15068", "15071", "15072", "15074", "15075", "15076", "15078", "15081", "15082", "15083", "15084", "15085", "15086", "15087", "15088", "15089", "15090", "15101", "15102", "15104", "15106", "15108", "15110", "15112", "15116", "15120", "15122", "15126", "15129", "15131", "15132", "15135", "15136", "15137", "15139", "15140", "15142", "15143", "15144", "15145", "15146", "15147", "15148", "15201", "15202", "15203", "15204", "15205", "38041", "38063", "65733", "65761", "71601", "71602", "71603", "71630", "71631", "71635", "71638", "71639", "71640", "71642", "71643", "71644", "71646", "71647", "71651", "71652", "71653", "71654", "71655", "71658", "71659", "71660", "71661", "71663", "71665", "71666", "71667", "71670", "71671", "71674", "71675", "71676", "71677", "71701", "71720", "71722", "71724", "71725", "71726", "71730", "71740", "71742", "71743", "71744", "71745", "71747", "71749", "71751", "71752", "71753", "71758", "71759", "71762", "71763", "71764", "71765", "71766", "71770", "71801", "71820", "71822", "71823", "71825", "71826", "71827", "71832", "71833", "71834", "71835", "71836", "71837", "71838", "71839", "71841", "71842", "71845", "71846", "71847", "71851", "71852", "71853", "71854", "71855", "71857", "71858", "71859", "71860", "71861", "71862", "71865", "71866", "71901", "71909", "71913", "71921", "71922", "63005", "63010", "63011", "63012", "63013", "63014", "63015", "63016", "63017", "63019", "63020", "63021", "63023", "63025", "63026", "63028", "63030", "63031", "63036", "63037", "63038", "63039", "63040", "63041", "63042", "63043", "63044", "63048", "63049", "63050", "63051", "63052", "63055", "63056", "63060", "63061", "63068", "63069", "63070", "63071", "63072", "63074", "63077", "63080", "63084", "63087", "63088", "63089", "63090", "63091", "63101", "63105", "63114", "63117", "63119", "63121", "63122", "63123", "63124", "63125", "63126", "63129", "63130", "63131", "63132", "63134", "63135", "63136", "63137", "63141", "63143", "63144", "63146", "63301", "63330", "63332", "63333", "63334", "63336", "63339", "63341", "63343", "63344", "63345", "63347", "63348", "63349", "63350", "63351", "63352", "63353", "63357", "63359", "63361", "63362", "63363", "63366", "63367", "63369", "63370", "50001", "50002", "50003", "50005", "50006", "50007", "50008", "50009", "50010", "50020", "50021", "50022", "50025", "50026", "50027", "50028", "50029", "50032", "50033", "50034", "50035", "50036", "50038", "50039", "50040", "50041", "50042", "50044", "50046", "50047", "50048", "50049", "50050", "50051", "50052", "50054", "50055", "50056", "50057", "50058", "50059", "50060", "50061", "50062", "50063", "50064", "50065", "50066", "50067", "50068", "50069", "50070", "50071", "50072", "50073", "50074", "50075", "50076", "50078", "50101", "50102", "50103", "50104", "50105", "50106", "50107", "50108", "50109", "50110", "50111", "50112", "50115", "50116", "50117", "50118", "50119", "50120", "50122", "50123", "50124", "50125", "50126", "50128", "50129", "50130", "50131", "50132", "50133", "50134", "50135", "50136", "50137", "50138", "50139", "50140", "50141", "50142", "50143", "50144", "50145", "57638", "58001", "58004", "58005", "58006", "58007", "58008", "58009", "58011", "58012", "58013", "58015", "58016", "58017", "58018", "58021", "58027", "58029", "58030", "58031", "58032", "58033", "58035", "58036", "58038", "58039", "58040", "58041", "58042", "58043", "58045", "58046", "58047", "58048", "58049", "58051", "58052", "58053", "58054", "58056", "58057", "58058", "58059", "58060", "58061", "58062", "58063", "58064", "58067", "58068", "58069", "58071", "58072", "58075", "58077", "58078", "58079", "58081", "58102", "58103", "58104", "58201", "58204", "58210", "58212", "58213", "58214", "58216", "58218", "58219", "58220", "58222", "58223", "58224", "58225", "58227", "58228", "58229", "58230", "58231", "58233", "58235", "58236", "58237", "58238", "58239", "58240", "58241", "58243", "58244", "58249", "58250", "58251", "58254", "58255", "58256", "58257", "58258", "58259", "58260", "97001", "97002", "97004", "97005", "97006", "97009", "97011", "97013", "97014", "97015", "97016", "97017", "97018", "97019", "97020", "97021", "97022", "97023", "97024", "97026", "97027", "97028", "97029", "97030", "97031", "97032", "97033", "97034", "97037", "97038", "97039", "97040", "97041", "97042", "97045", "97048", "97049", "97050", "97051", "97053", "97054", "97055", "97056", "97058", "97060", "97062", "97063", "97064", "97065", "97067", "97068", "97070", "97071", "97101", "97102", "97103", "97106", "97107", "97108", "97109", "97110", "97111", "97112", "97113", "97114", "97115", "97116", "97117", "97118", "97119", "97121", "97122", "97123", "97125", "97127", "97128", "97130", "97131", "97132", "97133", "97134", "97135", "97136", "97137", "97138", "97140", "97141", "97143", "97144", "97145", "97146", "97147", "97148", "97149", "97201", "97222", "97223", "97224", "97225", "97230", "46001", "46011", "46017", "46030", "46031", "46032", "46034", "46035", "46036", "46038", "46039", "46040", "46041", "46044", "46045", "46047", "46048", "46049", "46050", "46051", "46052", "46055", "46056", "46057", "46058", "46060", "46063", "46064", "46065", "46068", "46069", "46070", "46071", "46072", "46074", "46075", "46076", "46077", "46102", "46103", "46104", "46105", "46106", "46107", "46110", "46111", "46112", "46113", "46115", "46117", "46118", "46120", "46121", "46122", "46123", "46124", "46125", "46126", "46127", "46128", "46130", "46131", "46133", "46135", "46140", "46142", "46144", "46147", "46148", "46149", "46150", "46151", "46155", "46156", "46157", "46158", "46160", "46161", "46162", "46163", "46164", "46165", "46166", "46167", "46171", "46172", "46173", "46175", "46176", "46180", "46181", "46182", "46184", "46186", "46201", "46214", "46216", "46217", "46224", "46226", "53001", "53002", "53003", "53004", "53005", "53006", "53007", "53010", "53011", "53012", "53013", "53014", "53015", "53016", "53017", "53018", "53019", "53020", "53021", "53022", "53023", "53024", "53027", "53029", "53032", "53033", "53034", "53035", "53036", "53037", "53038", "53039", "53040", "53042", "53044", "53046", "53047", "53048", "53049", "53050", "53051", "53057", "53058", "53059", "53061", "53063", "53065", "53066", "53069", "53070", "53072", "53073", "53074", "53075", "53076", "53078", "53079", "53080", "53081", "53083", "53085", "53086", "53088", "53089", "53090", "53091", "53092", "53093", "53094", "53103", "53104", "53105", "53108", "53110", "53114", "53115", "53118", "53119", "53120", "53121", "53122", "53125", "53126", "53128", "53129", "53130", "53132", "53137", "53139", "53140", "53146", "53147", "53148", "53149", "53150", "53153", "53154", "53156", "53158", "53167", "89001", "89003", "89004", "89005", "89007", "89008", "89010", "89011", "89013", "89017", "89018", "89019", "89020", "89021", "89022", "89025", "89027", "89028", "89030", "89039", "89040", "89042", "89043", "89046", "89047", "89048", "89049", "89101", "89191", "89301", "89310", "89311", "89314", "89316", "89317", "89318", "89403", "89404", "89405", "89406", "89408", "89409", "89410", "89411", "89413", "89414", "89415", "89418", "89419", "89420", "89421", "89422", "89423", "89424", "89425", "89426", "89427", "89428", "89429", "89430", "89431", "89433", "89440", "89442", "89444", "89445", "89447", "89448", "89449", "89451", "89501", "89701", "89706", "89801", "89803", "89815", "89820", "89821", "89822", "89823", "89824", "89825", "89826", "89828", "89830", "89831", "89832", "89833", "89834", "89835", "89883", "55001", "55003", "55005", "55006", "55007", "55008", "55009", "55010", "55011", "55012", "55013", "55014", "55016", "55017", "55018", "55019", "55020", "55021", "55024", "55025", "55026", "55027", "55030", "55031", "55032", "55033", "55036", "55037", "55038", "55040", "55041", "55042", "55043", "55044", "55045", "55046", "55047", "55049", "55051", "55052", "55053", "55055", "55056", "55057", "55060", "55063", "55065", "55066", "55068", "55069", "55070", "55071", "55072", "55073", "55074", "55075", "55076", "55079", "55080", "55082", "55084", "55085", "55087", "55088", "55090", "55101", "55107", "55108", "55109", "55110", "55112", "55113", "55117", "55119", "55120", "55124", "55125", "55126", "55127", "55128", "55150", "55301", "55302", "55303", "55304", "55305", "55306", "55307", "55308", "55309", "55310", "55311", "55312", "55313", "55314", "55315", "55316", "55317", "55318", "55319", "19701", "19702", "19703", "19706", "19707", "19709", "19710", "19720", "19730", "19731", "19732", "19733", "19734", "19736", "19801", "19803", "19804", "19807", "19808", "19809", "19901", "19902", "19930", "19931", "19933", "19934", "19938", "19939", "19940", "19941", "19942", "19943", "19944", "19945", "19946", "19947", "19950", "19951", "19952", "19953", "19954", "19955", "19956", "19958", "19960", "19962", "19963", "19964", "19966", "19967", "19968", "19971", "19973", "19975", "19977", "19979", "19980", "98001", "98002", "98003", "98004", "98005", "98010", "98011", "98012", "98014", "98019", "98020", "98022", "98024", "98025", "98026", "98027", "98028", "98031", "98033", "98036", "98037", "98038", "98039", "98040", "98043", "98045", "98047", "98051", "98052", "98055", "98065", "98068", "98070", "98072", "98101", "98108", "98110", "98146", "98148", "98155", "98198", "98201", "98220", "98221", "98222", "98223", "98224", "98225", "98230", "98232", "98233", "98235", "98236", "98237", "98238", "98239", "98240", "98241", "98243", "98244", "98245", "98247", "98248", "98249", "98250", "98251", "98252", "98253", "98256", "98257", "98258", "98260", "98261", "98262", "98264", "98267", "98270", "98272", "98273", "98275", "98277", "98279", "98280", "98281", "98283", "98284", "98286", "98288", "98290", "98292", "98294", "98295", "98297", "98303", "98304", "98305", "98310", "98315", "98320", "98321", "52761", "60002", "60004", "60007", "60008", "60010", "60012", "60013", "60015", "60016", "60018", "60020", "60021", "60022", "60025", "60029", "60030", "60031", "60033", "60034", "60035", "60037", "60040", "60041", "60042", "60043", "60044", "60045", "60046", "60047", "60048", "60050", "60053", "60056", "60060", "60061", "60062", "60064", "60067", "60068", "60069", "60070", "60071", "60072", "60073", "60076", "60081", "60083", "60084", "60085", "60087", "60088", "60089", "60090", "60091", "60093", "60096", "60097", "60098", "60099", "60101", "60102", "60103", "60104", "60106", "60107", "60108", "60109", "60110", "60111", "60112", "60113", "60115", "60118", "60119", "60120", "60126", "60129", "60130", "60131", "60134", "60135", "60136", "60137", "60139", "60140", "60141", "60142", "60143", "60145", "60146", "60148", "60150", "60151", "60152", "60153", "60154", "60157", "60160", "60162", "96701", "96703", "96704", "96705", "96706", "96707", "96708", "96710", "96712", "96713", "96714", "96716", "96717", "96718", "96719", "96720", "96722", "96725", "96727", "96728", "96729", "96730", "96731", "96732", "96734", "96737", "96738", "96740", "96741", "96742", "96743", "96744", "96746", "96747", "96748", "96749", "96750", "96751", "96752", "96753", "96754", "96755", "96756", "96757", "96759", "96760", "96761", "96762", "96763", "96764", "96766", "96768", "96769", "96770", "96771", "96772", "96773", "96774", "96776", "96777", "96778", "96779", "96780", "96781", "96782", "96783", "96785", "96786", "96789", "96790", "96791", "96792", "96793", "96795", "96796", "96797", "96813", "96862", "96863", "06001", "06002", "06010", "06013", "06016", "06018", "06019", "06020", "06021", "06022", "06023", "06024", "06026", "06027", "06029", "06031", "06032", "06033", "06035", "06037", "06039", "06040", "06043", "06051", "06057", "06058", "06059", "06060", "06062", "06063", "06065", "06066", "06067", "06068", "06069", "06070", "06071", "06073", "06074", "06076", "06078", "06081", "06082", "06084", "06085", "06088", "06089", "06090", "06091", "06092", "06093", "06095", "06096", "06098", "06103", "06107", "06108", "06109", "06111", "06226", "06231", "06232", "06234", "06235", "06237", "06238", "06239", "06241", "06242", "06247", "06248", "06249", "06250", "06254", "06255", "06256", "06259", "06260", "06262", "06264", "06266", "06268", "06277", "06278", "06279", "06280", "06281", "06282", "06320", "06330", "06331", "06333", "06334", "06335", "06336", "06339", "06340", "06351", "06354", "06355", "59001", "59002", "59003", "59006", "59007", "59008", "59010", "59011", "59012", "59013", "59014", "59015", "59016", "59018", "59019", "59020", "59022", "59024", "59025", "59026", "59027", "59028", "59029", "59030", "59031", "59032", "59033", "59034", "59035", "59036", "59037", "59038", "59039", "59041", "59043", "59044", "59046", "59047", "59050", "59052", "59053", "59054", "59055", "59057", "59058", "59059", "59061", "59062", "59063", "59064", "59065", "59066", "59067", "59068", "59069", "59070", "59071", "59072", "59074", "59075", "59076", "59077", "59078", "59079", "59081", "59085", "59086", "59087", "59088", "59089", "59101", "59105", "59201", "59211", "59212", "59213", "59214", "59215", "59217", "59218", "59219", "59221", "59222", "59223", "59225", "59226", "59230", "59231", "59241", "59242", "59243", "59244", "59247", "59248", "59250", "59252", "59253", "59254", "59255", "59257", "20001", "73002", "73003", "73004", "73005", "73006", "73007", "73008", "73009", "73010", "73011", "73014", "73015", "73016", "73017", "73018", "73020", "73021", "73022", "73024", "73026", "73027", "73028", "73029", "73030", "73031", "73032", "73033", "73036", "73038", "73040", "73041", "73042", "73043", "73044", "73045", "73047", "73048", "73049", "73050", "73051", "73052", "73053", "73054", "73055", "73056", "73057", "73058", "73059", "73061", "73062", "73063", "73064", "73065", "73066", "73067", "73068", "73073", "73074", "73075", "73077", "73078", "73079", "73080", "73082", "73084", "73086", "73089", "73090", "73092", "73093", "73095", "73096", "73097", "73098", "73099", "73102", "73110", "73115", "73116", "73122", "73145", "73160", "73401", "73425", "73430", "73432", "73433", "73434", "73435", "73437", "73438", "73439", "73440", "73441", "73442", "73443", "73444", "73446", "73447", "73448", "84536", "85003", "85027", "85087", "85201", "85219", "85220", "85221", "85222", "85223", "85224", "85228", "85230", "85231", "85232", "85233", "85235", "85236", "85237", "85239", "85241", "85242", "85245", "85247", "85248", "85250", "85253", "85263", "85264", "85268", "85272", "85273", "85281", "85292", "85301", "85307", "85320", "85321", "85322", "85323", "85324", "85325", "85326", "85328", "85329", "85331", "85332", "85333", "85334", "85335", "85336", "85337", "85338", "85339", "85340", "85342", "85344", "85345", "85346", "85347", "85348", "85349", "85350", "85351", "85353", "85354", "85355", "85356", "85357", "85360", "85361", "85362", "85363", "85364", "85365", "85374", "85375", "85390", "85501", "85530", "85531", "85533", "85534", "85535", "85536", "85539", "85540", "85541", "85542", "85543", "85544", "85545", "85546", "85550", "85552", "85553", "85554", "85601", "85602", "85603", "27006", "27007", "27009", "27011", "27012", "27013", "27014", "27016", "27017", "27018", "27019", "27020", "27021", "27022", "27023", "27024", "27025", "27027", "27028", "27030", "27040", "27041", "27042", "27043", "27045", "27046", "27047", "27048", "27050", "27051", "27052", "27053", "27054", "27055", "27101", "27202", "27203", "27207", "27208", "27209", "27212", "27214", "27215", "27217", "27229", "27231", "27233", "27235", "27239", "27242", "27243", "27244", "27248", "27249", "27252", "27253", "27256", "27258", "27260", "27263", "27278", "27281", "27282", "27283", "27284", "27288", "27291", "27292", "27298", "27299", "27301", "27302", "27305", "27306", "27310", "27311", "27312", "27313", "27314", "27315", "27316", "27317", "27320", "27325", "27326", "27330", "27341", "27342", "27343", "27344", "27349", "27350", "27355", "27356", "27357", "27358", "27360", "27370", "27371", "27376", "38079", "40003", "40004", "40006", "40007", "40008", "40009", "40010", "40011", "40012", "40013", "40014", "40019", "40020", "40022", "40023", "40026", "40031", "40033", "40036", "40037", "40040", "40045", "40046", "40047", "40050", "40051", "40052", "40055", "40056", "40057", "40058", "40059", "40060", "40062", "40065", "40067", "40068", "40069", "40070", "40071", "40076", "40077", "40078", "40104", "40107", "40108", "40109", "40111", "40115", "40117", "40118", "40119", "40121", "40140", "40142", "40143", "40144", "40145", "40146", "40150", "40152", "40155", "40157", "40160", "40162", "40164", "40165", "40170", "40171", "40175", "40176", "40177", "40178", "40202", "40206", "40216", "40218", "40219", "40222", "40223", "40243", "40258", "40272", "40291", "40299", "40310", "40311", "40312", "40313", "40316", "40322", "40324", "40328", "40330", "40334", "40336", "40337", "40339", "40342", "99501", "99505", "99506", "99540", "99546", "99547", "99548", "99549", "99550", "99551", "99552", "99553", "99554", "99555", "99556", "99557", "99558", "99559", "99561", "99563", "99564", "99566", "99567", "99568", "99569", "99571", "99572", "99573", "99574", "99575", "99576", "99577", "99578", "99579", "99580", "99581", "99583", "99585", "99586", "99587", "99588", "99589", "99590", "99591", "99602", "99604", "99605", "99606", "99607", "99608", "99609", "99610", "99611", "99612", "99613", "99614", "99615", "99620", "99621", "99622", "99624", "99625", "99626", "99627", "99628", "99630", "99631", "99632", "99633", "99634", "99635", "99636", "99637", "99638", "99639", "99640", "99641", "99643", "99644", "99645", "99647", "99648", "99649", "99651", "99652", "99654", "99655", "99656", "99657", "99661", "99662", "99663", "99664", "99665", "99666", "99667", "99668", "99669", "99670", "99671", "30002", "30004", "30008", "30011", "30012", "30014", "30017", "30019", "30021", "30024", "30025", "30030", "30038", "30039", "30040", "30043", "30047", "30052", "30054", "30055", "30056", "30058", "30070", "30071", "30072", "30075", "30079", "30080", "30083", "30084", "30096", "30101", "30103", "30104", "30105", "30106", "30107", "30108", "30110", "30113", "30114", "30116", "30120", "30122", "30124", "30125", "30126", "30127", "30132", "30134", "30137", "30139", "30141", "30143", "30144", "30145", "30147", "30148", "30153", "30161", "30170", "30171", "30173", "30175", "30176", "30177", "30178", "30179", "30180", "30182", "30183", "30184", "30185", "30187", "30188", "30204", "30205", "30206", "30213", "30214", "30215", "30216", "30217", "30218", "30220", "30222", "30223", "30228", "30230", "30233", "30234", "30236", "30240", "30241", "30248", "30250", "30251", "30252", "30253", "30256", "84001", "84002", "84003", "84004", "84006", "84007", "84010", "84013", "84014", "84015", "84017", "84018", "84020", "84021", "84022", "84023", "84024", "84025", "84026", "84027", "84028", "84029", "84031", "84032", "84033", "84034", "84035", "84036", "84037", "84038", "84039", "84040", "84042", "84043", "84044", "84046", "84047", "84049", "84050", "84051", "84052", "84053", "84054", "84055", "84056", "84057", "84058", "84060", "84061", "84062", "84063", "84064", "84065", "84066", "84067", "84069", "84070", "84071", "84072", "84073", "84074", "84075", "84076", "84078", "84080", "84082", "84083", "84084", "84085", "84086", "84087", "84092", "84095", "84101", "84107", "84115", "84117", "84118", "84119", "84121", "84301", "84302", "84304", "84305", "84306", "84307", "84309", "84310", "84311", "84312", "84313", "84314", "84315", "84316", "84317", "84318", "84319", "84320", "84321", "84324", "68001", "68002", "68003", "68004", "68005", "68007", "68008", "68010", "68014", "68015", "68016", "68017", "68018", "68019", "68020", "68022", "68023", "68025", "68028", "68029", "68030", "68031", "68033", "68034", "68035", "68036", "68037", "68038", "68039", "68040", "68041", "68042", "68044", "68045", "68046", "68047", "68048", "68050", "68054", "68055", "68057", "68058", "68059", "68061", "68062", "68063", "68064", "68065", "68066", "68067", "68068", "68069", "68070", "68071", "68073", "68102", "68113", "68127", "68137", "68301", "68303", "68304", "68305", "68307", "68309", "68310", "68313", "68314", "68315", "68316", "68317", "68318", "68319", "68320", "68321", "68322", "68323", "68324", "68325", "68326", "68327", "68328", "68329", "68330", "68331", "68332", "68333", "68335", "68336", "68337", "68338", "68339", "68340", "68341", "68342", "68343", "68344", "68345", "68346", "68347", "57001", "57002", "57003", "57004", "57005", "57006", "57010", "57012", "57013", "57014", "57015", "57016", "57017", "57018", "57020", "57021", "57022", "57024", "57025", "57026", "57027", "57028", "57029", "57030", "57031", "57032", "57033", "57034", "57035", "57036", "57037", "57038", "57039", "57040", "57041", "57042", "57043", "57044", "57045", "57046", "57047", "57048", "57049", "57050", "57051", "57052", "57053", "57054", "57055", "57057", "57058", "57059", "57061", "57062", "57063", "57064", "57065", "57066", "57067", "57068", "57069", "57070", "57071", "57072", "57073", "57074", "57075", "57076", "57077", "57078", "57103", "57201", "57212", "57213", "57214", "57216", "57217", "57218", "57219", "57220", "57221", "57223", "57224", "57225", "57226", "57227", "57231", "57232", "57233", "57234", "57235", "57236", "57237", "57238", "57239", "57241", "57242", "57243", "57244", "57245"};
    public static HashMap<String, String> abbvrMap;

    static {
        abbvrMap = new HashMap<String, String>();
        abbvrMap.put("Alabama", "AL");
        abbvrMap.put("Alaska", "AK");
        abbvrMap.put("American Samoa", "AS");
        abbvrMap.put("Arizona", "AZ");
        abbvrMap.put("Arkansas", "AR");
        abbvrMap.put("Baker Island", "Baker Island");
        abbvrMap.put("California", "CA");
        abbvrMap.put("Colorado", "CO");
        abbvrMap.put("Connecticut", "CT");
        abbvrMap.put("Delaware", "DE");
        abbvrMap.put("District of Columbia", "DC");
        abbvrMap.put("Florida", "FL");
        abbvrMap.put("Federated States of Micronesia", "FM");
        abbvrMap.put("Georgia", "GA");
        abbvrMap.put("Guam", "GU");
        abbvrMap.put("Hawaii", "HI");
        abbvrMap.put("Howland Island", "Howland Island");
        abbvrMap.put("Idaho", "ID");
        abbvrMap.put("Illinois", "IL");
        abbvrMap.put("Indiana", "IN");
        abbvrMap.put("Iowa", "IA");
        abbvrMap.put("Jarvis Island", "Jarvis Island");
        abbvrMap.put("Johnston Atoll", "Johnston Atoll");
        abbvrMap.put("Kansas", "KS");
        abbvrMap.put("Kentucky", "KY");
        abbvrMap.put("Kingman Reef", "Kingman Reef");
        abbvrMap.put("Louisiana", "LA");
        abbvrMap.put("Maine", "ME");
        abbvrMap.put("Marshall Islands", "MH");
        abbvrMap.put("Maryland", "MD");
        abbvrMap.put("Massachusetts", "MA");
        abbvrMap.put("Michigan", "MI");
        abbvrMap.put("Midway Islands", "Midway Islands");
        abbvrMap.put("Minnesota", "MN");
        abbvrMap.put("Mississippi", "MS");
        abbvrMap.put("Missouri", "MO");
        abbvrMap.put("Montana", "MT");
        abbvrMap.put("Navassa Island", "Navassa Island");
        abbvrMap.put("Nebraska", "NE");
        abbvrMap.put("Nevada", "NV");
        abbvrMap.put("New Hampshire", "NH");
        abbvrMap.put("New Jersey", "NJ");
        abbvrMap.put("New Mexico", "NM");
        abbvrMap.put("New York", "NY");
        abbvrMap.put("North Carolina", "NC");
        abbvrMap.put("North Dakota", "ND");
        abbvrMap.put("Northern Mariana Islands", "MP");
        abbvrMap.put("Ohio", "OH");
        abbvrMap.put("Oklahoma", "OK");
        abbvrMap.put("Oregon", "OR");
        abbvrMap.put("Palau", "PW");
        abbvrMap.put("Palmyra Atoll", "Palmyra Atoll");
        abbvrMap.put("Pennsylvania", "PA");
        abbvrMap.put("Puerto Rico", "PR");
        abbvrMap.put("Rhode Island", "RI");
        abbvrMap.put("South Carolina", "SC");
        abbvrMap.put("South Dakota", "SD");
        abbvrMap.put("Tennessee", "TN");
        abbvrMap.put("Texas", "TX");
        abbvrMap.put("U.S. Minor Outlying Islands", "UM");
        abbvrMap.put("Utah", "UT");
        abbvrMap.put("Vermont", "VT");
        abbvrMap.put("Virginia", "VA");
        abbvrMap.put("Virgin Islands of the U.S.", "VI");
        abbvrMap.put("Wake Island", "Wake Island");
        abbvrMap.put("Washington", "WA");
        abbvrMap.put("West Virginia", "WV");
        abbvrMap.put("Wisconsin", "WI");
        abbvrMap.put("Wyoming", "WY");
        abbvrMap.put("Alberta", "AB");
        abbvrMap.put("British Columbia", "BC ");
        abbvrMap.put("Manitoba", "MB ");
        abbvrMap.put("New Brunswick", "NB ");
        abbvrMap.put("Newfoundland and Labrador", "NL ");
        abbvrMap.put("Northwest Territories", "NT ");
        abbvrMap.put("Nova Scotia", "NS ");
        abbvrMap.put("Nunavut", "NU ");
        abbvrMap.put("Ontario", "ON ");
        abbvrMap.put("Prince Edward Island", "PE ");
        abbvrMap.put("Quebec", "QC ");
        abbvrMap.put("Saskatchewan", "SK ");
        abbvrMap.put("Yukon", "YT ");
    }

    public static String RandomZipcode() {
        return zipcode[GenerateNumBetween(0, zipcode.length - 1)];
    }

    public static String RandomCountry() {
        return country[GenerateNumBetween(0, country.length - 1)];
    }

    public static String RandomCompany() {
        return company[GenerateNumBetween(0, company.length - 1)];
    }
    public static Random generator = new Random(21122012);

    public static void init() {
    }

    public static int GenerateNumBetween(int first, int last) {
        int result = generator.nextInt(last + 1 - first);
        return result + first;
    }

    public static String RandomDay() {
        return String.valueOf(GenerateNumBetween(1, 28));
    }

    public static String RandomMonth() {
        return String.valueOf(GenerateNumBetween(1, 11));
    }

    public static String RandomEmail() {

        return TextUtility.RandomFName() + TextUtility.GenerateRandomChar(3) + TextUtility.RandomLName() + "@" + Spin("{yahoo.com|hotmail.com|outlook.com|gmail.com}");
    }

    public static String RandomUserName() {

        return TextUtility.RandomFName() + TextUtility.RandomLName() + TextUtility.GenerateRandomNum(4);
    }

    public static String RandomPassword() {
        return TextUtility.GenerateRandomChar(4) + TextUtility.GenerateRandomChar(1).toUpperCase() + TextUtility.GenerateRandomNum(3) + TextUtility.Spin("{!|\"|$|%|&}");
    }

    public static String RandomAddress() {
        return TextUtility.GenerateRandomNum(3) + " " + TextUtility.RandomStateFullName();
    }

    public static String RandomYear() {
        DateTime dt = new DateTime();
        return String.valueOf(GenerateNumBetween(dt.getYear() - 60, dt.getYear() - 18));
    }

    public static String TimeStampMillis() {
        DateTime dt = new DateTime();

        return String.valueOf(dt.getMillis());
    }

    public static String TimeStampSeconds() {
        DateTime dt = new DateTime();

        return String.valueOf(dt.getMillis() / 1000);
    }

    public static String getUSStateAbbrevation(String state) {

        String result = abbvrMap.get(state);
        if (result == null) {
            return state;
        } else {
            return result;
        }
    }

    public static String RandomState() {
        String states = "{AL|AK|AS|AZ|AR|CA|CO|CT|DE|DC|FL|FM|GA|GU|HI|ID|IL|IN|IA|KS|KY|LA|ME|MH|MD|MA|MI|MN|MS|MO|MT|NE|NV|NH|NJ|NM|NY|NC|ND|MP|OH|OK|OR|PW|PA|PR|RI|SC|SD|TN|TX|UM|UT|VT|VA|VI|WA|WV|WI|WY|AB|BC |MB|NB|NL|NT|NS|NU|ON|PE|QC|SK|YT}";
        return TextUtility.Spin(states);
    }

    public static String RandomStateFullName() {
        String states = "{Alabama|Alaska|American Samoa|Arizona|Arkansas|Baker Island|California|Colorado|Connecticut|Delaware|District of Columbia|Florida|Federated States of Micronesia|Georgia|Guam|Hawaii|Howland Island|Idaho|Illinois|Indiana|Iowa|Jarvis Island|Johnston Atoll|Kansas|Kentucky|Kingman Reef|Louisiana|Maine|Marshall Islands|Maryland|Massachusetts|Michigan|Midway Islands|Minnesota|Mississippi|Missouri|Montana|Navassa Island|Nebraska|Nevada|New Hampshire|New Jersey|New Mexico|New York|North Carolina|North Dakota|Northern Mariana Islands|Ohio|Oklahoma|Oregon|Palau|Palmyra Atoll|Pennsylvania|Puerto Rico|Rhode Island|South Carolina|South Dakota|Tennessee|Texas|U.S. Minor Outlying Islands|Utah|Vermont|Virginia|Virgin Islands of the U.S.|Wake Island|Washington|West Virginia|Wisconsin|Wyoming|Alberta|British Columbia|Manitoba|New Brunswick|Newfoundland and Labrador|Northwest Territories|Nova Scotia|Nunavut|Ontario|Prince Edward Island|Quebec|Saskatchewan|Yukon}";
        return TextUtility.Spin(states);
    }

    public static String RandomJob() throws FileNotFoundException, IOException {
        try {
            String[] jobs = TextUtility.loadFile("TextUtility" + System.getProperty("file.separator") + "job.txt");
            return jobs[TextUtility.GenerateNumBetween(0, jobs.length - 1)];
        } catch (Exception ex) {
            return "";
        }

    }

    public static String GetURLsOnPage(String body) {
        try {
            Document e = Jsoup.parse("<html><body><p>" + body + "</p></body></html");
            List<String> urls = new LinkedList<String>();
            Elements anchors = e.select("a");
            if (anchors != null) {
                Iterator<Element> it = anchors.iterator();
                while (it.hasNext()) {
                    Element node = it.next();
                    if (!Strings.isNullOrEmpty(node.attr("href"))) {
                        urls.add(node.attr("href"));
                    }
                }
            }
            String result = "";
            Joiner joiner = Joiner.on("|").skipNulls();
            result = joiner.join(urls);
            return result;
        } catch (Exception ex) {
            return "";
        }
    }

    public static String StripHTML(String txtstr, boolean AnchorToHREF, String site) {

        String spunHTML = txtstr.replace("\r", "<br />");

        Document e = Jsoup.parse("<html><body><p>" + spunHTML + "</p></body></html");

        if (AnchorToHREF == true) {
            Elements anchors = e.select("a");
            if (anchors != null) {
                Iterator<Element> it = anchors.iterator();
                while (it.hasNext()) {
                    Element node = it.next();
                    TextNode newNode = new TextNode(" " + node.attr("href") + " ", "");
                    node.after(newNode);
                    node.remove();

                }
            }
        }
        String result = "";
        result = e.body().html().replace("<p>", "").replace("</p>", "");
        result = ReverseMiracleSpin(result);
        result = result.replace("<br />", "\r");
        return result;
    }

    public static String StripHTML(String txtstr) {

        String spunHTML = txtstr.replace("\r", "<br />");

        Document e = Jsoup.parse("<html><body><p>" + spunHTML + "</p></body></html");

        Elements anchors = e.select("a");
        if (anchors != null) {
            Iterator<Element> it = anchors.iterator();
            while (it.hasNext()) {
                Element node = it.next();
                TextNode newNode = new TextNode(" " + node.attr("href") + " ", "");
                node.after(newNode);
                node.remove();

            }
        }

        String result = "";
        result = e.body().html().replace("<p>", "").replace("</p>", "");
        result = ReverseMiracleSpin(result);
        result = result.replace("<br />", "\r");
        return result;
        //return functionReturnValue;
    }

    public static String StripHTMLContentOnly(String txtstr) {

        String spunHTML = txtstr.replace("\r", "<br />");

        Document e = Jsoup.parse("<html><body><p>" + spunHTML + "</p></body></html");

        Elements anchors = e.select("a");
        if (anchors != null) {
            Iterator<Element> it = anchors.iterator();
            while (it.hasNext()) {
                Element node = it.next();
                TextNode newNode = new TextNode(" " + node.outerHtml() + " ", "");
                node.after(newNode);
                node.remove();

            }
        }

        String result = "";
        result = e.body().html().replace("<p>", "").replace("</p>", "");
        result = ReverseMiracleSpin(result);
        result = result.replace("<br />", "\r");
        return result;
        //return functionReturnValue;
    }

    public static String TopBackLink(String txtstr) {

        String spunHTML = txtstr.replace("\r", "<br />");

        Document e = Jsoup.parse("<html><body><p>" + spunHTML + "</p></body></html");
        String result = "";

        Elements anchors = e.select("a");
        if (anchors != null) {
            Iterator<Element> it = anchors.iterator();
            while (it.hasNext()) {
                Element node = it.next();
                result = result + node.attr("href") + "\r\n";
                node.remove();

            }
        }


        result = result + e.body().text().replace("<br />", "\r");
        //result = ReverseMiracleSpin(result);
        return result;
    }

    public static String StripHTMLBBCode(String txtstr) {

        String spunHTML = Spin(txtstr).replace("<br />", "\r\n");
        Document e = Jsoup.parse("<html><body>" + spunHTML + "</body></html");

        Elements anchors = e.select("a");
        if (anchors != null) {
            Iterator<Element> it = anchors.iterator();
            while (it.hasNext()) {
                Element node = it.next();
                TextNode newNode = new TextNode(" [url=" + node.attr("href") + "]" + node.text() + "[/url] ", "");
                node.after(newNode);
                node.remove();
            }
        }

        String result = "";
        result = e.body().html();
        result = ReverseMiracleSpin(result);
        return result;
        //return functionReturnValue;
    }

    public static String ReverseMiracleSpin(String spin_string) {
        final Map<String, String> CharList = new ImmutableMap.Builder<String, String>().put("&#1072;", "a").put("&#1089;", "c").put("&#1077;", "e").put("&#1110;", "i").put("&#1112;", "j").put("&#1086;", "o").put("&#1088;", "p").put("&#1109;", "s").put("&#1091;", "y").build();
        //The replacement characters look the same but they're from the Russian alphabet - UTF8

        String regex = "(" + StringUtils.join(CharList.keySet().toArray(), "|") + ")";


        String[] SplitString = spin_string.split(regex);//Regex.Split(spin_string, "(" + Strings.Join(CharList.Keys.ToArray, "|") + ")");
        for (int i = 0; i < SplitString.length; i++) {
            String CurrItem = SplitString[i];
            if (CharList.containsKey(CurrItem)) {
                CurrItem = CharList.get(CurrItem);
            }
            SplitString[i] = CurrItem;
        }
        spin_string = StringUtils.join(SplitString, "");
        return spin_string;
    }

    public static String ExtractOne(String subject, String regex) {
        try {
            Pattern p = Pattern.compile(regex);
            Matcher m = p.matcher(subject);
            boolean find = m.find();
            if (find == false) {
                return "";
            }
            if (m.groupCount() == 0) {
                return "";
            } else {
                return m.group(1);
            }
        } catch (Exception ex) {
            System.out.println("\nExtractOne: " + ex);
            return "";
        }
    }

    public static String ExtractOne(String subject, String regex, boolean first) {
        try {
            Pattern p = Pattern.compile(regex);
            Matcher m = p.matcher(subject);

            String result = "";
            if (first == false) {
                while (m.find()) {
                    if (m.groupCount() == 0) {
                        result = null;
                    } else {
                        result = m.group(1);
                    }

                }
            }
            return result;
        } catch (Exception ex) {
            System.out.println(ex);
            return null;
        }
    }

    public static String ExtractOneAtTwo(String subject, String regex) {
        try {
            Pattern p = Pattern.compile(regex);
            Matcher m = p.matcher(subject);
            if (m.find()) {
                m.find();
            }
            if (m.groupCount() == 0) {
                return null;
            } else {
                return m.group(1);
            }
        } catch (Exception ex) {
            System.out.println(ex);
            return null;
        }
    }

    public static String ExtractOneAtMulti(String subject, String regex, int index) {
        try {
            Pattern p = Pattern.compile(regex);
            Matcher m = p.matcher(subject);
            if (m.find()) {
                m.find();
            }
            if (m.groupCount() == 0) {
                return "";
            } else {
                return m.group(index);
            }
        } catch (Exception ex) {
            System.out.println(ex);
            return "";
        }
    }

    public static String[] ExtractAll(String subject, String regexString) {
        List<String> matchList = new ArrayList<String>();
        try {
            Pattern regex = Pattern.compile(regexString, Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);
            Matcher regexMatcher = regex.matcher(subject);
            while (regexMatcher.find()) {
                matchList.add(regexMatcher.group());
            }
        } catch (PatternSyntaxException ex) {
            // Syntax error in the regular expression
        } finally {
            int length = matchList.size();
            if (length == 0) {
                return null;
            }
            String[] results = new String[length];
            int i = 0;
            for (String str : matchList) {
                results[i] = str;
                i++;
            }
            return results;
        }
        //return m.gr
    }

    public static String[] ExtractAll(String subject, String regexString, int groupID) {
        List<String> matchList = new ArrayList<String>();
        try {
            Pattern regex = Pattern.compile(regexString, Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);
            Matcher regexMatcher = regex.matcher(subject);
            while (regexMatcher.find()) {
                if (regexMatcher.groupCount() >= groupID) {
                    matchList.add(regexMatcher.group(groupID));
                }
            }
        } catch (PatternSyntaxException ex) {
            // Syntax error in the regular expression
        } finally {
            int length = matchList.size();
            if (length == 0) {
                return null;
            }
            String[] results = new String[length];
            int i = 0;
            for (String str : matchList) {
                results[i] = str;
                i++;
            }
            return results;
        }
        //return m.gr
    }

    public static List<String> ExtractURLs(String subject) {
        List<String> matchList = new ArrayList<String>();

        try {
            Pattern regex = Pattern.compile("\\b(https?|ftp|file)://[-A-Z0-9+&@#/%?=~_|$!:,.;]*[A-Z0-9+&@#/%=~_|$]", Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);
            Matcher regexMatcher = regex.matcher(subject);
            while (regexMatcher.find()) {

                matchList.add(regexMatcher.group());

            }
        } catch (PatternSyntaxException ex) {
            // Syntax error in the regular expression
        } finally {
            return matchList;
        }
    }

    public static List<String> ExtractURLsForPassInMail(String subject) {
        List<String> matchList = new ArrayList<String>();
        List<String> hostList = new ArrayList<String>();
        try {
            Pattern regex = Pattern.compile("\\b(https?|ftp|file)://[-A-Z0-9+&@#/%?=~_|$!:,.;]*[A-Z0-9+&@#/%=~_|$]", Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);
            Matcher regexMatcher = regex.matcher(subject);
            while (regexMatcher.find()) {
                String host = getHostSiteName(regexMatcher.group());
                if (!hostList.contains(host)) {
                    matchList.add(regexMatcher.group());
                    hostList.add(host);
                }
            }
        } catch (PatternSyntaxException ex) {
            // Syntax error in the regular expression
        } finally {
            return matchList;
        }
    }

    public static String RandomFName() {
        String[] names = Resources.FirstNames.split(",");
        Random rnd = new Random();
        int rndIndex = rnd.nextInt(names.length);
        return names[rndIndex];
    }

    public static String RandomNoun() {
        String[] nouns = Resources.Nouns.split(",");
        Random rnd = new Random();
        int rndIndex = rnd.nextInt(nouns.length);
        return nouns[rndIndex];
    }

    public static String RandomLName() {
        String[] names = Resources.LastNames.split(",");
        Random rnd = new Random();
        int rndIndex = rnd.nextInt(names.length);
        return names[rndIndex];
    }

    public static List<String> GenerateRandomVariations(String originalString) {
        List<String> spun_Strings = new ArrayList<String>();
        for (int i = 0; i < 20; i++) {
            String str = TextUtility.Spin(originalString, "");
            if (spun_Strings.size() != 0) {
                boolean contains = false;
                for (String spun_String : spun_Strings) {
                    if (spun_String.equalsIgnoreCase(str)) {
                        contains = true;
                        break;
                    }
                }
                if (!contains) {
                    spun_Strings.add(str);
                }
            } else {
                spun_Strings.add(str);
            }
        }
        return spun_Strings;
    }

    public static String AddVariation(String spun_String, String new_variation) {
        new_variation = new_variation.trim();
        Pattern p = Pattern.compile("^\\{(.*?)\\}$", Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);
        if (new_variation != "") {
            //^ and $ are start of line and end of line anchors
            Matcher m = p.matcher(spun_String);
            if (m.find()) {
                spun_String = "{" + m.group(1) + "|" + new_variation + "}";
            } else {
                if (spun_String == "") {
                    spun_String = new_variation;
                } else {
                    spun_String = "{" + spun_String + "|" + new_variation + "}";
                }
            }
        }
        return spun_String;
    }

    public static Object GetRandom(Object[] strs) {
        Random rnd = new Random();
        int rndIndex = rnd.nextInt(strs.length);
        return strs[rndIndex];
    }

    public static String GetRandomChars(int length) {
        Random rnd = new Random();
        String chars = "abcdefghijklmnopqrstuvwxyz";
        String result = "";
        for (int i = 0; i < length; i++) {
            result = result + chars.charAt(rnd.nextInt(chars.length()));
        }
        return result;
    }

    public static String GenerateRandomChar(int length) {
        Random rnd = new Random();
        String chars = "abcdefghijklmnopqrstuvwxyz";
        String result = "";
        for (int i = 0; i < length; i++) {
            result = result + chars.charAt(rnd.nextInt(chars.length()));
        }
        return result;
    }

    public static String GenerateRandomNum(int length) {
        Random rnd = new Random();
        String chars = "0123456789";
        String result = "";
        for (int i = 0; i < length; i++) {
            result = result + chars.charAt(rnd.nextInt(chars.length()));
        }
        return result;
    }

    public static String SuperSpin(String orginialString) {
        String[] String_choices = null;
        String deep_match = null;

        Pattern myRegExp = Pattern.compile(".*?\\{([^{}]+)\\}", Pattern.CASE_INSENSITIVE);
        Pattern shortRegExp = Pattern.compile("\\{([^{}]+)\\}", Pattern.CASE_INSENSITIVE);

        if (orginialString != null) {
            do {
                StringBuilder new_String = new StringBuilder();
                Matcher m = shortRegExp.matcher(orginialString);
                if (m.find() == false) {
                    break;
                }
                //using the original regex to check for a match gives issues from time to time (makes thread freeze), so use the version without .*? at the beginning

                m = myRegExp.matcher(orginialString);
                while (m.find()) {
                    deep_match = m.group(1);
                    String_choices = deep_match.split("\\|");
                    new_String.append(m.group().replaceFirst(Pattern.quote("{" + deep_match + "}"), (String) GetRandom(String_choices)));
                }
                orginialString = new_String.toString();

//		Match lastMatch = myMatches[myMatches.Count - 1];
//		new_String.Append(spin_String.SubString(lastMatch.Index + lastMatch.Length));
//		spin_String = new_String.ToString;

            } while (true);
        }
        return orginialString;

    }

    public static String Spin(String originalString, String site) {
        HashSet<Character> specialChar = new HashSet<Character>();
        specialChar.add('{');
        specialChar.add('|');
        int size = originalString.length();
        char[] originalChars = originalString.toCharArray();
        char[] stack = new char[size];
        int n = 0;
        int count = 0;
        int max = 0;
        for (int i = 0; i < originalChars.length; i++) {
            if (originalChars[i] == '{') {
                count++;
                if (count > max) {
                    max = count;
                }
            } else if (originalChars[i] == '}') {
                count--;
            }
        }


        int[] posOpen = new int[max];
        int currentOpen = 0;
        Random r = new Random();
        for (int i = 0; i < originalChars.length; i++) {
            if (n > 0) {
                if (originalChars[i] == '}') {
                    if (stack[n - 1] == '{') {
                        n--;
                        currentOpen--;
                        continue;
                    } else if (stack[n - 1] == '|') {
                        n--;
                    }
                } else if (originalChars[i] == '|') {
                    if (stack[n - 1] == '|') {
                        continue;
                    } else if (stack[n - 1] == '{') {
                        continue;
                    }
                }
            }
            if (originalChars[i] != '}') {
                stack[n] = originalChars[i];
                n++;
                if (originalChars[i] == '{') {
                    currentOpen++;
                    posOpen[currentOpen - 1] = n - 1;
                }
            } else {
                if (currentOpen == 0) {
                    stack[n] = originalChars[i];
                    n++;
                } else {
                    int slashCount = 0;
                    for (int j = posOpen[currentOpen - 1] + 1; j < n; j++) {
                        if (stack[j] == '|') {
                            slashCount++;
                        }
                    }
                    int choice = r.nextInt(slashCount + 1);
                    int tmpSlashCount = 0;
                    int pos = posOpen[currentOpen - 1];
                    while (tmpSlashCount < choice) {
                        pos = pos + 1;
                        if (stack[pos] == '|') {
                            tmpSlashCount++;
                        }
                    }
                    pos = pos + 1;
                    int tmp = posOpen[currentOpen - 1];
                    if (pos < n && stack[pos] != '|') {
                        while (pos < n) {
                            stack[tmp] = stack[pos];
                            tmp++;
                            pos++;
                            if (pos >= n || stack[pos] == '|' || stack[pos] == '}' || stack[pos] == '{') {
                                break;
                            }
                        }
                    }
                    n = tmp;
                    currentOpen--;
                }
            }
        }
        return new String(stack, 0, n);
    }

    public static String Spin(String orginialString) {
        return Spin(orginialString, "");
//        String[] String_choices = null;
//        String deep_match = null;
//
//        Pattern myRegExp = Pattern.compile(".*?\\{([^{}]+)\\}", Pattern.CASE_INSENSITIVE);
//        Pattern shortRegExp = Pattern.compile("\\{([^{}]+)\\}", Pattern.CASE_INSENSITIVE);
//
//        if (orginialString != null) {
//
//            do {
//                StringBuilder new_String = new StringBuilder();
//                Matcher m = shortRegExp.matcher(orginialString);
//                if (m.find() == false) {
//                    break;
//                }
//                //using the original regex to check for a match gives issues from time to time (makes thread freeze), so use the version without .*? at the beginning
//
//                m = myRegExp.matcher(orginialString);
//                while (m.find()) {
//                    deep_match = m.group(1);
//                    String_choices = deep_match.split("\\|");
//                    new_String.append(m.group().replaceFirst(Pattern.quote("{" + deep_match + "}"), (String) GetRandom(String_choices)));
//                }
//                orginialString = new_String.toString();
//
////		Match lastMatch = myMatches[myMatches.Count - 1];
////		new_String.Append(spin_String.SubString(lastMatch.Index + lastMatch.Length));
////		spin_String = new_String.ToString;
//
//            } while (true);
//        }
//        return orginialString;

    }

    public static String Left(String sBody, int i) {
        if (i <= sBody.length()) {
            return sBody.substring(0, i);
        } else {
            return sBody;
        }
    }

    public static String Right(String sBody, int i) {
        if (i <= sBody.length()) {
            return sBody.substring(sBody.length() - i, sBody.length());
        } else {
            return sBody;
        }
    }

    public static List<String> getURLsfromText(String subjectString) {
        List<String> result = new ArrayList<String>();
        try {
            Pattern regex = Pattern.compile("\\b(https?|ftp|file)://[-A-Z0-9+&@#/%?=~_|$!:,.;]*[A-Z0-9+&@#/%=~_|$]", Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);
            Matcher regexMatcher = regex.matcher(subjectString);
            while (regexMatcher.find()) {
                result.add(regexMatcher.group());
                // matched text: regexMatcher.group()
                // match start: regexMatcher.start()
                // match end: regexMatcher.end()
            }
            return result;
        } catch (PatternSyntaxException ex) {
            // Syntax error in the regular expression
            return new ArrayList<String>();
        }

    }

    public static String getCanonicalSiteName(String siteName) {
        try {
            if (siteName.equals("")) {
                return siteName;
            }
            String siteName1 = siteName.toLowerCase();
            if (!siteName1.startsWith("http")) {
                siteName1 = "http://" + siteName;
            }
            URI uri = URI.create(siteName1);
            String host = uri.getHost();
            if (InetAddresses.isInetAddress(host)) {
                return host;
            }
            InternetDomainName domain = InternetDomainName.from(host);
            return domain.topPrivateDomain().name();
        } catch (Exception ex) {
            return siteName;
        }
    }

    public static String getHostSiteName(String siteName) {
        try {
            if (siteName.equals("")) {
                return siteName;
            }
            siteName = siteName.toLowerCase();
            if (!siteName.startsWith("http")) {
                siteName = "http://" + siteName;
            }
            URI uri = URI.create(siteName);
            String host = uri.getHost();
            return host;
        } catch (Exception ex) {
            return siteName;
        }
    }

    public static EzineInfo DownloadEzineArticle(String keywords, ManualResetEvent stopEvent) throws NoSuchAlgorithmException, KeyManagementException, UnsupportedEncodingException, IOException, InterruptedException, SubmissionTimeoutException, TaskStoppedException {
        NukeHttpClient client = new NukeHttpClient(true);
        client.setRequestExecutorService(Executors.newFixedThreadPool(1));
        String result = null;
        client.setStopEvent(stopEvent);
        EzineInfo info = null;
        try {
            String requestString = "http://www.google.com/search?q=site%3Aezinearticles.com+" + URLEncoder.encode(keywords, "UTF-8") + "&ie=utf-8&oe=utf-8&aq=t&rls=org.mozilla:en-US:official&client=firefox-a";
            //for (int i = 0; i < MainApp.nukeSettings.getMaxRetries(); i++) {
            for (int i = 0; i < 4; i++) {
                try {
                    result = client.DownloadString(requestString);
                    String[] urls = TextUtility.ExtractAll(result, "<a href=\"/url\\?q=(http://ezinearticles.com.*?)\"", 1);
                    if (urls != null) {
                        String url = (String) TextUtility.GetRandom(urls);
                        url = URLDecoder.decode(url, "UTF-8");
                        result = client.DownloadString(url);
                    }
                    if (result != null && !result.contains("<div id=\"article-content\"")) {
                        urls = TextUtility.ExtractAll(result, "<a class=\"article-title-link\" (.*?)</a>", 1);
                        if (urls != null && urls.length > 0) {
                            String req_url = (String) TextUtility.GetRandom(urls);
                            req_url = URLDecoder.decode(req_url, "UTF-8");
                            req_url = TextUtility.ExtractOne(req_url, "href=\"(.*?)\">");
                            req_url = URLDecoder.decode(req_url, "UTF-8");
                            result = client.DownloadString("http://ezinearticles.com" + req_url);
                        }
                    }

                    String body = TextUtility.ExtractOne(result, "<div id=\"article-content\">\\s*<p>(.*?)</div>");
                    if (body != null) {
                        body = body.replace("<p>", "\r\n").replace("</p>", "\r\n");
                        String title = TextUtility.ExtractOne(result, "<title>(.*?)</title>");
                        if (title == null) {
                            title = "";
                        }
                        String tags = TextUtility.ExtractOne(result, "<meta name=\"keywords\" content=\"(.*?)\"");
                        if (tags == null) {
                            tags = "";
                        }
                        info = new EzineInfo(title, body, tags);
                    }
                    break;
                } catch (Exception ex) {
                    if (ex instanceof TaskStoppedException) {
                        break;
                    }
                }
            }

        } catch (Exception ex) {
            info = null;
            throw ex;
        } finally {
            client.getConnectionManager().shutdown();
            client.getRequestExecutorService().shutdown();
            return info;
        }
        //return null;
    }

    public static String MD5(String md5) {
        try {
            java.security.MessageDigest md = java.security.MessageDigest.getInstance("MD5");
            byte[] array = md.digest(md5.getBytes());
            StringBuffer sb = new StringBuffer();
            for (int i = 0; i < array.length; ++i) {
                sb.append(Integer.toHexString((array[i] & 0xFF) | 0x100).substring(1, 3));
            }
            return sb.toString();
        } catch (java.security.NoSuchAlgorithmException e) {
        }
        return null;
    }

    public static String[] ExtractWhole(String subject, String regex) {
        Pattern p = Pattern.compile(regex);
        Matcher m = p.matcher(subject);
        m.find();
        if (m.groupCount() == 0) {
            return null;
        }
        String[] result = new String[m.groupCount() + 1];
        for (int i = 1; i <= m.groupCount(); i++) {
            result[i] = m.group(i);
        }
        return result;
        //return m.gr
    }

    public static String GenMonth01() {
        return TextUtility.Spin("{01|02|03|04|05|06|07|08|09|10|11|12}");
    }

    public static String GenMonth1() {
        return String.valueOf(TextUtility.GenerateNumBetween(1, 12));
    }

    public static String GenDay() {
        return String.valueOf(TextUtility.GenerateNumBetween(10, 28));
    }

    public static String GenYear() {
        return String.valueOf(TextUtility.GenerateNumBetween(1950, 1994));
    }

    public static String NowYear(int addYear) {
        DateTime now = new DateTime();
        return String.valueOf(now.getYear() + addYear);
    }

    public static String NowMonth() {
        DateTime now = new DateTime();
        return String.valueOf(now.getMonthOfYear());
    }

    public static String NowDay() {
        DateTime now = new DateTime();
        return String.valueOf(now.getDayOfMonth());
    }

    public static String NowHour() {
        DateTime now = new DateTime();
        return String.valueOf(now.getHourOfDay());
    }

    public static String NowMinute() {
        DateTime now = new DateTime();
        return String.valueOf(now.getMinuteOfHour());
    }

    public static String ModifyAnchor(String txtstr) {
        String spunHTML = Spin(txtstr).replace("<br />", "\r\n");
        Document e = Jsoup.parse("<html><body>" + spunHTML + "</body></html");

        Elements anchors = e.select("a");
        if (anchors != null) {
            Iterator<Element> it = anchors.iterator();
            while (it.hasNext()) {
                Element node = it.next();
                node.html("<a href=\"" + node.attr("href") + "\">" + node.text() + "</a>");
                //TextNode newNode = new TextNode("<a href=\"" + node.attr("href") + "\">" + node.text() + "</a>", "");
//                Element newEl = new Element(new Tag("a"), "", new Attributes().)
//                node.after(newNode);
//                node.remove();
            }
        }

        String result = "";
        result = e.body().html();
        result = ReverseMiracleSpin(result);
        return result;
    }

    public static String HandleCaptchaMath(String sQuest) {
        String result = "";

        return result;
    }

    public static void writeToFile(String content, String fileName) throws IOException {
        try {
            String rootDir = System.getProperty("user.dir");
            String resultPath = rootDir + System.getProperty("file.separator") + fileName;
            FileWriter writer = new FileWriter(new File(resultPath), true);
            BufferedWriter outterWriter = new BufferedWriter(writer);
            outterWriter.write(content);
            outterWriter.close();
        } catch (IOException ex) {
            System.out.println(ex.getMessage());
        }
    }

    public static String GetRandomAvatar() {
        try {
            String rootDir = System.getProperty("user.dir");
            String folderDir = rootDir + System.getProperty("file.separator") + "Avatars";
            File folder = new File(folderDir);
            int count = 0;
            File returnFile;
            int randomCount = 0;
            while (count < 20) {
                randomCount = TextUtility.GenerateNumBetween(0, folder.listFiles().length - 1);
                returnFile = folder.listFiles()[randomCount];
                String returnFileName = returnFile.getName().toLowerCase();
                if (returnFile.isFile() && (returnFileName.endsWith(".jpg") || returnFileName.endsWith(".jpeg") || returnFileName.endsWith(".png") || returnFileName.endsWith(".gif"))) {
                    return folderDir + System.getProperty("file.separator") + returnFile.getName();
                }
                count = count + 1;
            };
        } catch (Exception ex) {
            System.out.println("\nTextUtility.GetRandomAvatar: " + ex.getMessage());
            return "";
        }
        return "";
//        String resultPath = rootDir + System.getProperty("file.separator") + "Avatars" + System.getProperty("file.separator") + "cam-bay-hoc-duong.wmv";

//        return resultPath;
    }

    public static String GetRandomAvatar(String imgtypes) {
        try {
            String rootDir = System.getProperty("user.dir");
            String folderDir = rootDir + System.getProperty("file.separator") + "Avatars";
            File folder = new File(folderDir);
            int count = 0;
            File returnFile;
            int randomCount = 0;
            while (count < 20) {
                randomCount = TextUtility.GenerateNumBetween(0, folder.listFiles().length - 1);
                returnFile = folder.listFiles()[randomCount];
                String returnFileName = returnFile.getName().toLowerCase();
                if (returnFile.isFile()) {
                    for (String imgtype : imgtypes.split("\\|")) {
                        if (returnFileName.endsWith(imgtype)) {
                            return folderDir + System.getProperty("file.separator") + returnFile.getName();
                        }
                    }
                }


                count = count + 1;
            };
        } catch (Exception ex) {
            System.out.println("\nTextUtility.GetRandomAvatar: " + ex.getMessage());
            return "";
        }
        return "";

    }

    public static String RandomAboutMe() {

        return Spin("{My name is |I am |I'm }") + RandomFName() + " " + RandomLName() + ".\n Nice to meet you";
    }

    public static String RandomPhone() {
        String phone = TextUtility.Spin("{5138718124|6063418542|5137569256|5136312077|7082029429|4197829455|6144595410|6143442026|5137776594|5132710272|7083945081}");
        return phone;
    }

    public static String SolveMathCaptcha(String sQuest) {
        if (!Strings.isNullOrEmpty(sQuest)) {
            sQuest = sQuest.replace(" ", "").replace("?", "").replace("-", "-").replace(":", "").replace("=", "").replace("−", "-").replace("x", "*").toLowerCase();
            sQuest = sQuest.replace("one", "1");
            sQuest = sQuest.replace("two", "2");
            sQuest = sQuest.replace("three", "3");
            sQuest = sQuest.replace("four", "4");
            sQuest = sQuest.replace("five", "5");
            sQuest = sQuest.replace("six", "6");
            sQuest = sQuest.replace("seven", "7");
            sQuest = sQuest.replace("eight", "8");
            sQuest = sQuest.replace("nine", "9");
            sQuest = sQuest.replace("ten", "10");
            ScriptEngineManager manager = new ScriptEngineManager();
            ScriptEngine engine = manager.getEngineByName("JavaScript");
            String sAns = "";
            try {
                sAns = engine.eval(sQuest).toString();

            } catch (Exception ex) {
                System.out.println("\nException in solve Math :" + sQuest);
                return "";
            }
            if (!Strings.isNullOrEmpty(sAns)) {
                return sAns.replace(".0", "");

            } else {
                return "";

            }
        }
        return "";
    }

    public static String SolveQuestyCaptcha(String sQuest, String site) throws FileNotFoundException, FileNotFoundException, IOException, IOException {
        try {
            if (Strings.isNullOrEmpty(sQuest)) {
                return "";
            }
//            TextUtility.writeToFile(site + "    " + sQuest + "\n", "QuestyCaptcha\\phpfox_captchacauhoi.txt");
            String separator = System.getProperty("file.separator");
            String[] questions = loadFile("QuestyCaptcha" + separator + "questions.txt");
            String[] questionsWikiName = loadFile("QuestyCaptcha" + separator + "questionsWikiName.txt");

            String[] questions1 = loadFile("QuestyCaptcha" + separator + "questions1.txt");
            String[] questions2 = loadFile("QuestyCaptcha" + separator + "questions2.txt");
            String[] questions3 = loadFile("QuestyCaptcha" + separator + "questions3.txt");

            String result = "";

            for (int i = 0; i < questions.length; i++) {
                String quest = questions[i].split("\\|")[0];
                String questleft = Left(quest, 40);
                if (sQuest.equalsIgnoreCase(questions[i].split("\\|")[0]) || sQuest.contains(questleft)) {
                    return questions[i].split("\\|")[1];
                }
            }

            for (int i = 0; i < questionsWikiName.length; i++) {
                if (sQuest.equalsIgnoreCase(questionsWikiName[i]) || sQuest.contains(questionsWikiName[i])) {
                    String host = getHostSiteName(site);
                    if (host.endsWith(".de")) {
                        return host.trim().replace(".de", "");
                    }
                    if (host.startsWith("www.") || host.startsWith("wiki")) {
                        return host.trim().replace(".com", "").replace(".teia.org.br", "").replace("www.", "").replace("wiki", "");
                    } else {
                        return host.split(".")[0];
                    }
                }
            }

            for (int i = 0; i < questions1.length; i++) {
                result = ExtractOne(sQuest, questions1[i]);
                if (!Strings.isNullOrEmpty(result)) {
//                return result.trim().replace("\"", "");
                    if (result.trim().replace("\"", "").contains("zero")) {
                        return "0";
                    }
                    if (result.trim().replace("\"", "").contains("one")) {
                        return "1";
                    }
                    if (result.trim().replace("\"", "").contains("two")) {
                        return "2";
                    }
                    if (result.trim().replace("\"", "").contains("three")) {
                        return "3";
                    }
                    if (result.trim().replace("\"", "").contains("four")) {
                        return "4";
                    }
                    if (result.trim().replace("\"", "").contains("five")) {
                        return "5";
                    }
                    if (result.trim().replace("\"", "").contains("six")) {
                        return "6";
                    }
                    if (result.trim().replace("\"", "").contains("seven")) {
                        return "7";
                    }
                    if (result.trim().replace("\"", "").contains("eight")) {
                        return "8";
                    }
                    if (result.trim().replace("\"", "").contains("nine")) {
                        return "9";
                    }
                    if (result.trim().replace("\"", "").contains("ten")) {
                        return "10";
                    }
                }
            }
            for (int i = 0; i < questions2.length; i++) {
                result = ExtractOne(sQuest, questions2[i]);
                if (!Strings.isNullOrEmpty(result)) {
                    return result.trim().replace("\"", "");
                }

            }

            for (int i = 0; i < questions3.length; i++) {
                result = ExtractOne(sQuest, questions3[i]);
                if (!Strings.isNullOrEmpty(result)) {
                    return String.valueOf(result.trim().replace("\"", "").length());
                }

            }


            return result;
        } catch (Exception ex) {
            System.out.println("Exception at SolveQuestyCaptcha: " + ex.getMessage());
            return "";
        }
    }

    private static String[] loadFile(String fileName) throws FileNotFoundException, IOException {
        try {
            String rootDir = System.getProperty("user.dir");
            String path = rootDir + System.getProperty("file.separator") + fileName;
            FileInputStream stream = new FileInputStream(new File(path));
            String result = IOUtils.toString(stream, "UTF-8");

            String[] siteList = result.split("\n");

            return siteList;
        } catch (Exception ex) {
            System.out.println("Exeption at loadFile: " + fileName);
            return null;
        }

    }
}
